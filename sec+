Intimidation in cybersecurity is when an attacker uses fear or threats to scare someone into giving up information or access.

___________________________________________



Consensus (Social Proof) Social Engineering

This is when an attacker tricks you by saying "everyone else is doing it." They use the power of the group to pressure you.

Simple Examples:
Fake Office Email:

"Hi, this is the IT team. All employees have already updated their passwords. Please click here to update yours now." (The link is fake).

Phishing Message:

"Hey! Most of the department has already signed up for the new benefits portal. Here's the link to register." (The portal is fake).

A phone call:

"This is the CFO's office. We are processing bonuses and all managers have confirmed their staff details. Can you verify your bank account number now?"


_______________________________________________________________



Scarcity Social Engineering

This is when an attacker creates a false sense of urgency or limited supply to make you act quickly without thinking.

Simple Examples:
Phishing Email:

"Last Chance! Your account will be permanently deleted in 24 hours unless you verify your details now!" (The link is fake).

Fake Alert:

"Emergency Security Update: A critical virus is attacking. You must install this patch immediately to protect your computer!" (The patch is malware).




________________________________________________________________________-
Familiarity Social Engineering

This is when an attacker pretends to be someone you know or trust to trick you.

Simple Examples:
Pretending to be a Colleague:

"Hi, this is Sarah from accounting. We met at the party last week. Can you send me the project file? I need it urgently."
____________________________________________________

Business Email Compromise (BEC) is a type of scam where an attacker tricks a company into sending money or sensitive information by pretending to be a trusted person.
_______________________________________________________________________

The "Attack Vector" metric answers the question: "What does the hacker need to reach the vulnerability?"
There are four levels, from easiest to hardest to exploit:
MEMORE:  PLAN 
PHYSICAL / SCORE: 0.20
LOCAL  / SCORE :  0.55
ADJACENT/ SCORE:  0.62
NETWORK / SCORE:  0.85
___________________________________________________________________



CVSS = Common Vulnerability Scoring System

It’s a standard way to rate how severe a security vulnerability is.

The exam expects you to know the rating scale and what the numbers mean.

👉 The CVSS scale looks like this:

Score Range	Severity
0.0	None
0.1 – 3.9	Low
4.0 – 6.9	Medium
7.0 – 8.9	High
9.0 – 10.0	Critical

📖 Why for the exam?
They might give you a scenario:

“A vulnerability has a CVSS score of 9.5” → you should know that’s Critical.

Or: “Which vulnerability poses the greatest risk?” → you compare by score.
___________________________________________








Positive	Alarm says "yes, danger found"
Negative	Alarm says "no danger found"
True	Alarm's answer is correct
False	Alarm's answer is wrong


✅ TRUE POSITIVE (TP)
Alarm rings.

There is a burglar.

✔️ Correct decision.

🔔 "YES burglar" → and really a burglar is there.

❌ FALSE POSITIVE (FP)
Alarm rings.

But it's just your cat.

❌ Wrong decision.

🔔 "YES burglar" → but actually, no burglar.

✅ TRUE NEGATIVE (TN)
Alarm doesn't ring.

And your house is safe.

✔️ Correct again.

🔕 "NO burglar" → and yes, there’s no one.

❌ FALSE NEGATIVE (FN)
Alarm doesn’t ring.

But there is a burglar!

❌ Big mistake.

🔕 "NO burglar" → but a thief is inside!
-------------------------------------------------------------------
. Symmetric Encryption (Same Key 🔑)
Algorithms:

AES (Advanced Encryption Standard) – Most common (128/256-bit).
DES (Deprecated, insecure).
3DES (Triple DES – Slow, being phased out).
ChaCha20 (Fast, used in TLS/SSL).


. Asymmetric Encryption (Public/Private Keys 🔐)
Algorithms:

RSA (Key exchange & signatures, slow).
ECC (Elliptic Curve Cryptography – Smaller keys, faster than RSA).
Diffie-Hellman (Key exchange only, not encryption).
EdDSA (Digital signatures, e.g., Ed25519).
---------------------------------------------------------

Layer	Simple Name	What It Does	Real-Life Example
7	Application	You write the message / pick the gift 🎁	WhatsApp, Gmail, Zoom
6	Presentation	Wraps the gift in a way your friend understands 🎀	Encryption, format
5	Session	Opens the door to start chatting 🗣️	Call setup, login session
4	Transport	Breaks gift into pieces & numbers them 📦📦📦	Makes sure all arrive
3	Network	Finds the best road to your friend 🗺️	IP address, routing
2	Data Link	Gets it safely across one street 🚦	MAC address, switch
1	Physical	Sends it on wires/waves 🚗📡	Cable, Wi-Fi, fiber

🧱 Short Story Summary:
App layer: You say “Hi!”

Presentation: Your language is turned into symbols or code

Session: A connection is opened

Transport: Message is broken into smaller packets

Network: Each packet is sent on a path

Data link: Packets are delivered safely across each hop

Physical: The bits travel through cables or Wi-Fi
_____________________________________________________________-

Vulnrability lifecycle:

_____________________________________________________
Code Analysis in Cybersecurity (2 Main Types):

SAST (Static Application Security Testing)
"White-box" testing
When: Scans source code before running it
Finds: Coding flaws, vulnerabilities, bad practices
Tools: SonarQube, Checkmarx, Fortify

DAST (Dynamic Application Security Testing)
"Black-box" testing
When: Tests running application (from the outside)
Finds: Runtime vulnerabilities, configuration errors
Tools: OWASP ZAP, Burp Suite
Bonus: SCA (Software Composition Analysis)
Scans third-party libraries/dependencies for known vulnerabilities
Tools: Snyk, Dependency-check

Simple Rule: SAST finds bugs in your code, DAST finds holes in your running app, SCA finds risks in imported code.

_________________________________________________________________________

IDOR = Insecure Direct Object Reference

It's a vulnerability where an attacker can access someone else's data by changing an ID in the URL or request.

Simple Example:
Normal User's URL:

text
https://bank.com/account?user_id=123
Hacker Changes ID:

text
https://bank.com/account?user_id=124

______________________________________________________________________
Request Forgery = fake request
1. CSRF (Cross-Site Request Forgery)
Attacker tricks your browser to send a request.
Works if you are logged in (cookies/session).
Example: click link → money sent without knowing.
Parts: logged-in user + malicious link + cookies + trusted server.

2. SSRF (Server-Side Request Forgery)
Attacker tricks the server to send requests.
Example: server loads http://127.0.0.1/admin → attacker sees internal systems.
Parts: user input + server request + attacker’s bad input.
___________________________________________________________________________________

Remove comments from source code before deployment because they can guide attackers and reveal sensitive information.
_________________________________________________________________________
 steganography is concerned with concealing both the fact that a secret message is being sent and its contents
_________________________________________________________________________
Symmetric Key System Notes   🔥🔥🔥🔥🔥🔥

Symmetric encryption: one key per pair of people.

Total keys formula: n*(n-1)/2 (n = number of people)

New keys when adding 1 person = number of existing people

Example:
10 people → 10*9/2 = 45 keys
Add 11th person → 11*10/2 = 55 keys
New keys added = 55 - 45 = 10
Answer: 10


Asymmetric Key System Notes 🔥🔥🔥🔥🔥🔥🔥

Asymmetric encryption: each person has 2 keys → Public key + Private key.

Total keys formula: 2n (n = number of people).

New keys when adding 1 person = 2 (their public + private).

Example:
10 people → 2*10 = 20 keys
Add 11th person → 2*11 = 22 keys
New keys added = 22 - 20 = 2
Answer: 2
_________________________________________________________________________
Certificate File Formats (for notes)
 PEM (Privacy Enhanced Mail)
 - Text format, easy to share (like email copy)
 - Extensions: .pem, .crt, .cer, .key
 DER (Distinguished Encoding Rules)
 - Binary format (like barcode)
 - Extensions: .der, .cer
 PFX / PKCS#12
 - Certificate + private key + extras, password protected (like locked wallet)
 - Extensions: .pfx, .p12
 P7B / PKCS#7
 - Certificate chain only, no private key (like official copy)
 - Extensions: .p7b, .p7c
 Other types:
 - SPC → Microsoft software publisher certificate
 - CRT / CER → Often same as PEM or DER, depending on encoding
 - KEY → Private key only
_________________________________________________________________________

_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________
_________________________________________________________________________

























































